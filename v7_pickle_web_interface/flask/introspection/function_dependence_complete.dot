digraph {
    subgraph cluster_validate_inference_rules_sympy{
        "validate_inference_rules_sympy.split_expr_into_lhs_rhs";
        "validate_inference_rules_sympy.validate_step";
        "validate_inference_rules_sympy.add_X_to_both_sides";
        "validate_inference_rules_sympy.subtract_X_from_both_sides";
        "validate_inference_rules_sympy.multiply_both_sides_by";
        "validate_inference_rules_sympy.divide_both_sides_by";
        "validate_inference_rules_sympy.substitute_X_for_Y";
        "validate_inference_rules_sympy.multiply_LHS_by_unity";
        "validate_inference_rules_sympy.multiply_RHS_by_unity";
        "validate_inference_rules_sympy.add_zero_to_LHS";
        "validate_inference_rules_sympy.add_zero_to_RHS";
        "validate_inference_rules_sympy.take_curl_of_both_sides";
        "validate_inference_rules_sympy.apply_divergence";
        "validate_inference_rules_sympy.indefinite_integral_over";
        "validate_inference_rules_sympy.indefinite_integration";
        "validate_inference_rules_sympy.indefinite_integrate_LHS_over";
        "validate_inference_rules_sympy.indefinite_integrate_RHS_over";
        "validate_inference_rules_sympy.integrate_over_from_to";
        "validate_inference_rules_sympy.partially_differentiate_with_respect_to";
        "validate_inference_rules_sympy.X_cross_both_sides_by";
        "validate_inference_rules_sympy.both_sides_cross_X";
        "validate_inference_rules_sympy.X_dot_both_sides";
        "validate_inference_rules_sympy.both_sides_dot_X";
        "validate_inference_rules_sympy.make_expr_power";
        "validate_inference_rules_sympy.select_real_parts";
        "validate_inference_rules_sympy.select_imag_parts";
        "validate_inference_rules_sympy.swap_LHS_with_RHS";
        "validate_inference_rules_sympy.sum_exponents_LHS";
        "validate_inference_rules_sympy.sum_exponents_RHS";
        "validate_inference_rules_sympy.add_expr_X_to_expr_Y";
        "validate_inference_rules_sympy.sub_RHS_of_expr_X_into_expr_Y";
        "validate_inference_rules_sympy.sub_LHS_of_expr_X_into_expr_Y";
        "validate_inference_rules_sympy.mult_expr_X_by_expr_Y";
        "validate_inference_rules_sympy.LHS_of_expr_X_eq_LHS_of_expr_Y";
        "validate_inference_rules_sympy.RHS_of_expr_X_eq_RHS_of_expr_Y";
        "validate_inference_rules_sympy.raise_both_sides_to_power";
        "validate_inference_rules_sympy.claim_expr_X_equals_expr_Y";
        "validate_inference_rules_sympy.claim_LHS_equals_RHS";
        "validate_inference_rules_sympy.expand_integrand";
        "validate_inference_rules_sympy.function_is_even";
        "validate_inference_rules_sympy.function_is_odd";
        "validate_inference_rules_sympy.conjugate_function_X";
        "validate_inference_rules_sympy.conjugate_both_sides";
        "validate_inference_rules_sympy.conjugate_transpose_both_sides";
        "validate_inference_rules_sympy.distribute_conjugate_transpose_to_factors";
        "validate_inference_rules_sympy.distribute_conjugate_to_factors";
        "validate_inference_rules_sympy.expand_magnitude_to_conjugate";
        "validate_inference_rules_sympy.replace_scalar_with_vector";
        "validate_inference_rules_sympy.simplify";
        "validate_inference_rules_sympy.latex_from_expr_local_id";
        "validate_inference_rules_sympy.create_sympy_expr_tree_from_latex";
        "validate_inference_rules_sympy.get_symbols_from_latex";
    }
    subgraph cluster_controller{
        "controller.before_request";
        "controller.after_request";
        "controller.api_all_derivations";
        "controller.api_list_derivations";
        "controller.api_read_derivation_by_name";
        "controller.api_all_expressions";
        "controller.api_list_expressions";
        "controller.api_read_expression_by_id";
        "controller.api_all_infrules";
        "controller.api_list_infrules";
        "controller.api_infrules_by_name";
        "controller.api_all_local_to_global";
        "controller.api_list_local";
        "controller.api_local_to_global";
        "controller.api_all_symbols";
        "controller.api_list_symbols";
        "controller.api_symbols_by_name";
        "controller.api_all_operators";
        "controller.api_list_operators";
        "controller.api_operators_by_name";
        "controller.index";
        "controller.faq";
        "controller.user_documentation";
        "controller.developer_documentation";
        "controller.example_T_f_d3js";
        "controller.how_to_build_the_physics_derivation_graph";
        "controller.editor";
        "controller.start_new_derivation";
        "controller.show_all_derivations";
        "controller.list_all_operators";
        "controller.list_all_symbols";
        "controller.list_all_expressions";
        "controller.list_all_inference_rules";
        "controller.select_derivation_to_edit";
        "controller.select_derivation_step_to_edit";
        "controller.select_from_existing_derivations";
        "controller.new_step_select_inf_rule";
        "controller.provide_expr_for_inf_rule";
        "controller.step_review";
        "controller.rename_derivation";
        "controller.review_derivation";
        "controller.modify_step";
        "controller.exploded_step";
        "controller.create_new_inf_rule";
    }

    subgraph cluster_common_lib{
        "common_lib.create_sql_connection";
        "common_lib.read_db";
        "common_lib.write_db";
        "common_lib.json_to_sql";
    }
    subgraph cluster_compute{
        "compute.timeout";
        "compute.allowed_file";
        "compute.validate_json_file";
        "compute.create_session_id";
        "compute.get_linear_indices";
        "compute.list_local_id_for_derivation";
        "compute.list_global_id_not_in_derivation";
        "compute.create_files_of_db_content";
        "compute.convert_json_to_dataframes";
        "compute.convert_df_to_pkl";
        "compute.convert_dataframes_to_sql";
        "compute.convert_data_to_rdf";
        "compute.convert_data_to_cypher";
        "compute.get_sorted_list_of_symbols_not_in_use";
        "compute.get_sorted_list_of_operators_not_in_use";
        "compute.get_sorted_list_of_expr";
        "compute.get_sorted_list_of_expr_not_in_use";
        "compute.get_sorted_list_of_inf_rules_not_in_use";
        "compute.get_sorted_list_of_inf_rules";
        "compute.get_sorted_list_of_derivations";
        "compute.get_derivation_steps";
        "compute.create_expr_global_id";
        "compute.create_step_id";
        "compute.create_expr_local_id";
        "compute.flatten_dict";
        "compute.extract_operators_from_expression_dict";
        "compute.extract_symbols_from_expression_dict";
        "compute.extract_expressions_from_derivation_dict";
        "compute.popularity_of_derivations";
        "compute.popularity_of_operators";
        "compute.popularity_of_symbols";
        "compute.popularity_of_expressions";
        "compute.popularity_of_infrules";
        "compute.remove_file_debris";
        "compute.generate_all_expr_and_infrule_pngs";
        "compute.create_tex_file_for_expr";
        "compute.generate_map_of_derivations";
        "compute.write_step_to_graphviz_file";
        "compute.generate_tex_for_derivation";
        "compute.generate_pdf_for_derivation";
        "compute.list_expr_in_derivation";
        "compute.edges_in_derivation";
        "compute.create_d3js_json";
        "compute.create_derivation_png";
        "compute.create_step_graphviz_png";
        "compute.generate_graphviz_of_exploded_step";
        "compute.create_png_from_latex";
        "compute.modify_latex_in_step";
        "compute.delete_step_from_derivation";
        "compute.delete_derivation";
        "compute.add_inf_rule";
        "compute.delete_inf_rule";
        "compute.rename_derivation";
        "compute.rename_inf_rule";
        "compute.edit_operator_latex";
        "compute.edit_symbol_latex";
        "compute.edit_inf_rule_latex";
        "compute.edit_expr_latex";
        "compute.delete_symbol";
        "compute.delete_operator";
        "compute.delete_expr";
        "compute.create_step";
        "compute.determine_derivation_validity";
        "compute.determine_step_validity";
    }
    "validate_inference_rules_sympy.validate_step" -> "common_lib.read_db";
    "validate_inference_rules_sympy.latex_from_expr_local_id" -> "common_lib.read_db";
    "controller.get_symbols_from_latex" -> "common_lib.json_to_sql";
    "controller.api_all_derivations" -> "common_lib.read_db";
    "controller.api_list_derivations" -> "common_lib.read_db";
    "controller.api_read_derivation_by_name" -> "common_lib.read_db";
    "controller.api_all_expressions" -> "common_lib.read_db";
    "controller.api_list_expressions" -> "common_lib.read_db";
    "controller.api_read_expression_by_id" -> "common_lib.read_db";
    "controller.api_all_infrules" -> "common_lib.read_db";
    "controller.api_list_infrules" -> "common_lib.read_db";
    "controller.api_infrules_by_name" -> "common_lib.read_db";
    "controller.api_all_local_to_global" -> "common_lib.read_db";
    "controller.api_list_local" -> "common_lib.read_db";
    "controller.api_local_to_global" -> "common_lib.read_db";
    "controller.api_all_symbols" -> "common_lib.read_db";
    "controller.api_list_symbols" -> "common_lib.read_db";
    "controller.api_symbols_by_name" -> "common_lib.read_db";
    "controller.api_all_operators" -> "common_lib.read_db";
    "controller.api_list_operators" -> "common_lib.read_db";
    "controller.api_operators_by_name" -> "common_lib.read_db";
    "controller.editor" -> "common_lib.read_db";
    "controller.list_all_operators" -> "common_lib.read_db";
    "controller.list_all_symbols" -> "common_lib.read_db";
    "controller.list_all_expressions" -> "common_lib.read_db";
    "controller.list_all_inference_rules" -> "common_lib.read_db";
    "controller.select_derivation_step_to_edit" -> "common_lib.read_db";
    "controller.provide_expr_for_inf_rule" -> "common_lib.read_db";
    "controller.step_review" -> "common_lib.read_db";
    "controller.review_derivation" -> "common_lib.read_db";
    "controller.modify_step" -> "common_lib.read_db";
    "controller.create_new_inf_rule" -> "json_schema";
    "controller.editor" -> "compute.create_session_id";
    "controller.editor" -> "compute.create_files_of_db_content";
    "controller.editor" -> "compute.allowed_file";
    "controller.editor" -> "compute.validate_json_file";
    "controller.show_all_derivations" -> "compute.generate_map_of_derivations";
    "controller.show_all_derivations" -> "compute.popularity_of_derivations";
    "controller.list_all_operators" -> "compute.delete_operator";
    "controller.list_all_operators" -> "compute.edit_operator_latex";
    "controller.list_all_operators" -> "compute.popularity_of_operators";
    "controller.list_all_operators" -> "compute.get_sorted_list_of_operators_not_in_use";
    "controller.list_all_symbols" -> "compute.delete_symbol";
    "controller.list_all_symbols" -> "compute.edit_symbol_latex";
    "controller.list_all_symbols" -> "compute.popularity_of_symbols";
    "controller.list_all_symbols" -> "compute.get_sorted_list_of_symbols_not_in_use";
    "controller.list_all_expressions" -> "compute.popularity_of_expressions";
    "controller.list_all_expressions" -> "compute.edit_expr_latex";
    "controller.list_all_expressions" -> "compute.delete_expr";
    "controller.list_all_expressions" -> "compute.get_sorted_list_of_expr";
    "controller.list_all_expressions" -> "compute.get_sorted_list_of_inf_rules_not_in_use";
    "controller.list_all_inference_rules" -> "compute.popularity_of_infrules";
    "controller.list_all_inference_rules" -> "compute.add_inf_rule";
    "controller.list_all_inference_rules" -> "compute.delete_inf_rule";
    "controller.list_all_inference_rules" -> "compute.rename_inf_rule";
    "controller.list_all_inference_rules" -> "compute.edit_inf_rule_latex";
    "controller.list_all_inference_rules" -> "compute.get_sorted_list_of_inf_rules_not_in_use";
    "controller.select_derivation_step_to_edit" -> "compute.get_derivation_steps";
    "controller.select_derivation_step_to_edit" -> "compute.delete_step_from_derivation";
    "controller.select_derivation_step_to_edit" -> "compute.determine_derivation_validity";
    "controller.select_from_existing_derivations" -> "compute.get_sorted_list_of_derivations";
    "controller.select_from_existing_derivations" -> "compute.generate_pdf_for_derivation";
    "controller.select_from_existing_derivations" -> "compute.generate_tex_for_derivation";
    "controller.new_step_select_inf_rule" -> "compute.get_sorted_list_of_inf_rules";
    "controller.provide_expr_for_inf_rule" -> "compute.create_step";
    "controller.provide_expr_for_inf_rule" -> "compute.determine_derivation_validity";
    "controller.provide_expr_for_inf_rule" -> "compute.popularity_of_expressions";
    "controller.provide_expr_for_inf_rule" -> "compute.list_local_id_for_derivation";
    "controller.provide_expr_for_inf_rule" -> "compute.list_global_id_not_in_derivation";
    "controller.step_review" -> "compute.create_step_graphviz_png";
    "controller.step_review" -> "compute.determine_derivation_validity";
    "controller.step_review" -> "compute.popularity_of_expressions";
    "controller.rename_derivation" -> "compute.rename_derivation";
    "controller.review_derivation" -> "compute.generate_pdf_for_derivation";
    "controller.review_derivation" -> "compute.generate_tex_for_derivation";
    "controller.review_derivation" -> "compute.delete_derivation";
    "controller.review_derivation" -> "compute.create_derivation_png";
    "controller.review_derivation" -> "compute.create_d3js_json";
    "controller.review_derivation" -> "compute.determine_derivation_validity";
    "controller.review_derivation" -> "compute.popularity_of_expressions";
    "controller.modify_step" -> "compute.determine_derivation_validity";
    "controller.modify_step" -> "compute.create_step_graphviz_png";
    "controller.modify_step" -> "compute.modify_latex_in_step";
    "controller.modify_step" -> "compute.get_linear_indices";
    "controller.exploded_step" -> "compute.generate_graphviz_of_exploded_step";
    "controller.create_new_inf_rule" -> "compute.create_session_id";
    "controller.provide_expr_for_inf_rule" -> "validate_inference_rules_sympy.validate_step";
    "controller.modify_step" -> "validate_inference_rules_sympy.validate_step";
    "compute.determine_derivation_validity" -> "validate_inference_rules_sympy.validate_step";
    "compute.determine_step_validity" -> "validate_inference_rules_sympy.validate_step";
    "compute.get_linear_indices" -> "common_lib.read_db";
    "compute.list_local_id_for_derivation" -> "common_lib.read_db";
    "compute.list_global_id_not_in_derivation" -> "common_lib.read_db";
    "compute.create_files_of_db_content" -> "common_lib.read_db";
    "compute.convert_json_to_dataframes" -> "common_lib.read_db";
    "compute.convert_data_to_rdf" -> "common_lib.read_db";
    "compute.convert_data_to_cypher" -> "common_lib.read_db";
    "compute.get_sorted_list_of_expr" -> "common_lib.read_db";
    "compute.get_sorted_list_of_inf_rules_not_in_use" -> "common_lib.read_db";
    "compute.get_sorted_list_of_inf_rules" -> "common_lib.read_db";
    "compute.get_sorted_list_of_derivations" -> "common_lib.read_db";
    "compute.get_derivation_steps" -> "common_lib.read_db";
    "compute.create_expr_global_id" -> "common_lib.read_db";
    "compute.create_step_id" -> "common_lib.read_db";
    "compute.create_expr_local_id" -> "common_lib.read_db";
    "compute.extract_operators_from_expression_dict" -> "common_lib.read_db";
    "compute.extract_symbols_from_expression_dict" -> "common_lib.read_db";
    "compute.extract_expressions_from_derivation_dict" -> "common_lib.read_db";
    "compute.popularity_of_derivations" -> "common_lib.read_db";
    "compute.popularity_of_operators" -> "common_lib.read_db";
    "compute.popularity_of_symbols" -> "common_lib.read_db";
    "compute.popularity_of_expressions" -> "common_lib.read_db";
    "compute.popularity_of_infrules" -> "common_lib.read_db";
    "compute.generate_all_expr_and_infrule_pngs" -> "common_lib.read_db";
    "compute.generate_map_of_derivations" -> "common_lib.read_db";
    "compute.write_step_to_graphviz_file" -> "common_lib.read_db";
    "compute.generate_tex_for_derivation" -> "common_lib.read_db";
    "compute.generate_pdf_for_derivation" -> "common_lib.read_db";
    "compute.list_expr_in_derivation" -> "common_lib.read_db";
    "compute.edges_in_derivation" -> "common_lib.read_db";
    "compute.create_d3js_json" -> "common_lib.read_db";
    "compute.create_derivation_png" -> "common_lib.read_db";
    "compute.generate_graphviz_of_exploded_step" -> "common_lib.read_db";
    "compute.modify_latex_in_step" -> "common_lib.read_db";
    "compute.modify_latex_in_step" -> "common_lib.write_db";
    "compute.delete_step_from_derivation" -> "common_lib.read_db";
    "compute.delete_step_from_derivation" -> "common_lib.write_db";
    "compute.delete_derivation" -> "common_lib.read_db";
    "compute.delete_derivation" -> "common_lib.write_db";
    "compute.add_inf_rule" -> "common_lib.read_db";
    "compute.add_inf_rule" -> "common_lib.write_db";
    "compute.delete_inf_rule" -> "common_lib.read_db";
    "compute.delete_inf_rule" -> "common_lib.write_db";
    "compute.rename_derivation" -> "common_lib.read_db";
    "compute.rename_derivation" -> "common_lib.write_db";
    "compute.rename_inf_rule" -> "common_lib.read_db";
    "compute.rename_inf_rule" -> "common_lib.write_db";
    "compute.edit_operator_latex" -> "common_lib.read_db";
    "compute.edit_operator_latex" -> "common_lib.write_db";
    "compute.edit_symbol_latex" -> "common_lib.read_db";
    "compute.edit_symbol_latex" -> "common_lib.write_db";
    "compute.edit_inf_rule_latex" -> "common_lib.read_db";
    "compute.edit_inf_rule_latex" -> "common_lib.write_db";
    "compute.edit_expr_latex" -> "common_lib.read_db";
    "compute.edit_expr_latex" -> "common_lib.write_db";
    "compute.delete_symbol" -> "common_lib.read_db";
    "compute.delete_symbol" -> "common_lib.write_db";
    "compute.delete_operator" -> "common_lib.read_db";
    "compute.delete_operator" -> "common_lib.write_db";
    "compute.delete_expr" -> "common_lib.read_db";
    "compute.delete_expr" -> "common_lib.write_db";
    "compute.create_step" -> "common_lib.read_db";
    "compute.create_step" -> "common_lib.write_db";
    "compute.determine_derivation_validity" -> "common_lib.read_db";
    "compute.determine_step_validity" -> "common_lib.read_db";
    "compute.create_png_from_latex" -> "compute.create_tex_file_for_expr";
    "compute.create_files_of_db_content" -> "compute.convert_dataframes_to_sql";
}
